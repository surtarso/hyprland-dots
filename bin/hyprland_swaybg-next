#!/bin/bash

# Cycles through the background images available in consolidated theme system

# Set to true to sync hyprlock wallpaper, false to skip
SYNC_LOCKSCREEN_BG=true
SYNC_GRUB_BG=true

# Paths
#BACKGROUNDS_DIR="$HOME/.local/share/archriot/backgrounds"
BACKGROUNDS_DIR="/home/tarso/Pictures/wallpapers"
CURRENT_BACKGROUND_FILE="$HOME/.config/archriot/.current-background"
GRUB_BACKGROUND_FILE="/boot/grub/background.jpg"
HYPRLOCK_CONF="$HOME/.config/hypr/hyprlock.conf"
ARCHRIOT_BIN="$HOME/.local/share/archriot/install/archriot"

# Check if backgrounds directory exists
if [[ ! -d "$BACKGROUNDS_DIR" ]]; then
    echo "‚ùå Backgrounds directory not found: $BACKGROUNDS_DIR"
    exit 1
fi

# Get all background files from flat directory
mapfile -t BACKGROUNDS < <(find "$BACKGROUNDS_DIR" -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.webp" \) | sort)
TOTAL=${#BACKGROUNDS[@]}

# Check if any backgrounds exist
if [[ $TOTAL -eq 0 ]]; then
    echo "‚ùå No background images found in $BACKGROUNDS_DIR"
    exit 1
fi

# Get current background from state file
CURRENT_BACKGROUND=""
if [[ -f "$CURRENT_BACKGROUND_FILE" ]]; then
    CURRENT_BACKGROUND=$(cat "$CURRENT_BACKGROUND_FILE" 2>/dev/null)
fi

# Find current background index
INDEX=0
if [[ -n "$CURRENT_BACKGROUND" && -f "$CURRENT_BACKGROUND" ]]; then
    for i in "${!BACKGROUNDS[@]}"; do
        if [[ "${BACKGROUNDS[$i]}" == "$CURRENT_BACKGROUND" ]]; then
            INDEX=$i
            break
        fi
    done
fi

# Get next background (wrap around)
NEXT_INDEX=$(((INDEX + 1) % TOTAL))
NEW_BACKGROUND=${BACKGROUNDS[$NEXT_INDEX]}

# Verify new background file exists
if [[ ! -f "$NEW_BACKGROUND" ]]; then
    echo "‚ùå Next background file not found: $NEW_BACKGROUND"
    exit 1
fi

# Save current background to state file
echo "$NEW_BACKGROUND" > "$CURRENT_BACKGROUND_FILE"

echo "üñºÔ∏è  Switched to background: $(basename "$NEW_BACKGROUND") ($(($NEXT_INDEX + 1))/${#BACKGROUNDS[@]})"

# Relaunch swaybg
pkill -x swaybg 2>/dev/null
sleep 0.5
nohup setsid swaybg -i "$NEW_BACKGROUND" -m fill >/dev/null 2>&1 & disown

# Update theme colors if dynamic theming is enabled
if [[ -f "$ARCHRIOT_BIN" ]]; then
    "$ARCHRIOT_BIN" --apply-wallpaper-theme "$NEW_BACKGROUND" 2>/dev/null || echo "‚ö† Theme update may have failed"
fi

# --- Sync Hyprlock wallpaper ---
if [[ "$SYNC_LOCKSCREEN_BG" == true ]]; then
    if [[ -f "$HYPRLOCK_CONF" ]]; then
        sed -i "s|^\(\s*path\s*=\s*\).*|\1$NEW_BACKGROUND|" "$HYPRLOCK_CONF"
        echo "üîí Hyprlock wallpaper updated: $NEW_BACKGROUND"
    else
        echo "‚ö† Hyprlock config not found at $HYPRLOCK_CONF"
    fi
fi

# --- Sync GRUB background ---
if [[ "$SYNC_GRUB_BG" == true ]]; then
    if [[ -w "$(dirname "$GRUB_BACKGROUND_FILE")" ]]; then
        # Direct symlink if script runs with permissions
        sudo cp "$NEW_BACKGROUND" "$GRUB_BACKGROUND_FILE"
        echo "üß© GRUB background updated: $NEW_BACKGROUND"
    else
        # Use sudo if needed (will not trigger mkconfig)
        sudo cp "$NEW_BACKGROUND" "$GRUB_BACKGROUND_FILE" && \
        echo "üß© GRUB background updated (via sudo): $NEW_BACKGROUND" || \
        echo "‚ö† Failed to update GRUB background"
    fi
fi

# Verify swaybg started
sleep 1
if pgrep -x swaybg >/dev/null; then
    echo "‚úì Background service restarted"
else
    echo "‚ö† Background service may not have started properly"
fi
